#include "ti8x/gfx/rect.z80"

rectXOR:
;  (B,C) = (x,y) signed
;  (D,E) = (w,h) unsigned
;  HL points to buf
    call rectSub
    ret nc
    dec b
    jp m,xorrect0
    inc b
xor_rect_loop:
    push bc
    push hl
    ld a,(hl) \ xor d
    .db $DA ;start of jp c,**, will skip the next two bytes since `xor d` reset carry
    ld a,(hl) \ cpl \ ld (hl),a \ inc hl \ djnz $-4
    ld a,(hl) \ xor e \ ld (hl),a
    ld bc,12
    pop hl
    add hl,bc
    pop bc
    dec c
    jr nz,xor_rect_loop
    ret
xorrect0:
    ld a,d
    and e
    ld b,c
    ld c,a
    ld de,12
    ld a,c
    xor (hl)
    ld (hl),a
    add hl,de
    djnz $-4
    ret
